<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Graph AI Chatbot</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      background-color: #000;
      font-family: Arial, sans-serif;
      color: white;
      overflow: hidden;
    }
    canvas {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 0;
    }
    #chatInput {
      position: fixed;
      bottom: 0;
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      padding: 10px;
      display: flex;
      z-index: 2;
    }
    #userInput {
      width: 60%;
      padding: 10px;
      border-radius: 20px;
      background: rgba(255, 255, 255, 0.05);
      border: none;
      color: white;
    }
    #sendBtn, #uploadBtn {
      margin-left: 10px;
      padding: 10px 20px;
      border-radius: 20px;
      border: none;
      background: #444;
      color: white;
      font-weight: bold;
      cursor: pointer;
    }
    #response {
      position: absolute;
      top: 20px;
      bottom: 80px;
      left: 10px;
      right: 10px;
      padding: 10px;
      overflow-y: auto;
      z-index: 1;
      background: rgba(0, 0, 0, 0.4);
    }
    #chartContainer {
      background: white;
      padding: 10px;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <canvas id="waves"></canvas>
  <div id="response"></div>
  <div id="chatInput">
    <input id="userInput" type="text" placeholder="Ask a question or upload a file..." onkeydown="if(event.key==='Enter'){sendMessage();}" />
    <button id="sendBtn" onclick="sendMessage()">Send</button>
    <input type="file" id="uploadBtn" accept=".csv,.png,.jpg,.jpeg" />
  </div>

  <script>
    const canvas = document.getElementById('waves');
    const ctx = canvas.getContext('2d');
    let width, height;

    function resize() {
      width = canvas.width = window.innerWidth;
      height = canvas.height = window.innerHeight;
    }
    window.addEventListener('resize', resize);
    resize();

    let t = 0;
    function animate() {
      ctx.clearRect(0, 0, width, height);
      ctx.fillStyle = '#000';
      ctx.fillRect(0, 0, width, height);
      for (let i = 0; i < 3; i++) {
        ctx.beginPath();
        for (let x = 0; x < width; x++) {
          const y = Math.sin(x * 0.008 + t + i) * 30 + Math.sin(x * 0.01 + t * 0.8 + i) * 40 + height / 2;
          ctx.lineTo(x, y);
        }
        ctx.strokeStyle = `rgba(0, 150, 255, 0.7)`;
        ctx.lineWidth = 2.5;
        ctx.stroke();
      }
      t += 0.02;
      requestAnimationFrame(animate);
    }
    animate();

    function isCSV(text) {
      return text.includes(',') && text.includes('\n');
    }

    function drawChartFromCSV(csv) {
      const lines = csv.trim().split('\n');
      const headers = lines[0].split(',');
      const labels = [];
      const data = [];
      for (let i = 1; i < lines.length; i++) {
        const [x, y] = lines[i].split(',');
        labels.push(x);
        data.push(Number(y));
      }

      const container = document.createElement('div');
      container.id = 'chartContainer';
      container.innerHTML = `<canvas id='chartCanvas'></canvas>`;
      document.getElementById('response').appendChild(container);

      const ctx = document.getElementById('chartCanvas').getContext('2d');
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: headers[1],
            data: data,
            fill: false,
            borderColor: 'cyan',
            tension: 0.1
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: { title: { display: true, text: headers[0] } },
            y: { title: { display: true, text: headers[1] } }
          }
        }
      });

      const csvPrompt = `Analyze the following data and describe the trends and insights:\n\n${csv}`;
      document.getElementById('userInput').value = csvPrompt;
      sendMessage();
    }

    async function sendMessage() {
      const input = document.getElementById('userInput').value;
      const responseDiv = document.getElementById('response');
      if (!input.trim()) return;

      responseDiv.innerHTML += `<p><strong>You:</strong> ${input}</p>`;
      document.getElementById('userInput').value = '';

      responseDiv.innerHTML += `<p><em>Loading AI summary...</em></p>`;

      try {
        const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            Authorization: 'Bearer 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',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            model: 'openai/gpt-4-vision-preview',
            messages: [{ role: 'user', content: input }]
          })
        });
        const data = await response.json();
        const summary = data.choices?.[0]?.message?.content || 'No response received.';
        responseDiv.innerHTML += `<p><strong>AI:</strong> ${marked.parse(summary)}</p>`;
        responseDiv.scrollTop = responseDiv.scrollHeight;
      } catch (e) {
        responseDiv.innerHTML += `<p style='color:red;'>Error: ${e.message}</p>`;
      }
    }

    document.getElementById('uploadBtn').addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (!file) return;
      const ext = file.name.split('.').pop().toLowerCase();
      const reader = new FileReader();

      if (ext === 'csv') {
        reader.onload = (event) => {
          const text = event.target.result;
          drawChartFromCSV(text);
        };
        reader.readAsText(file);
      } else if (['png', 'jpg', 'jpeg'].includes(ext)) {
        const formData = new FormData();
        formData.append("file", file);
        const responseDiv = document.getElementById('response');
        responseDiv.innerHTML += `<p><strong>Image Uploaded:</strong> ${file.name}</p><p><em>Analyzing image...</em></p>`;

        // Convert image to base64 for inline vision input (OpenRouter doesn't always support this, may require a real backend)
        const reader2 = new FileReader();
        reader2.onload = async () => {
          const base64data = reader2.result.split(',')[1];
          const payload = {
            model: "openai/gpt-4-vision-preview",
            messages: [
              {
                role: "user",
                content: [
                  { type: "text", text: "Describe this chart image in detail." },
                  { type: "image_url", image_url: { url: `data:image/${ext};base64,${base64data}` } }
                ]
              }
            ]
          };

          const res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
            method: 'POST',
            headers: {
              Authorization: 'Bearer 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',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
          });

          const result = await res.json();
          const summary = result.choices?.[0]?.message?.content || 'No response';
          responseDiv.innerHTML += `<p><strong>AI:</strong> ${marked.parse(summary)}</p>`;
        };
        reader2.readAsDataURL(file);
      }
    });
  </script>
</body>
</html>
